{"version":3,"sources":["utils/fetchClient.ts","api/posts.ts","api/comments.ts","components/UserContext/UserContext.tsx","api/users.ts","components/UserSelector.tsx","components/Loader/Loader.tsx","components/PostsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getPosts","user","id","getComments","postData","UsersContext","React","createContext","ErrorContext","UserContext","PostsContext","CommentsContext","PostDataContext","UserProvider","children","useState","users","setUsers","isLoading","setIsloading","isLoadingPosts","setIsLoaidingPosts","isError","setIsError","setUser","posts","setPosts","comments","setComments","setPostData","loadUsersFromServer","a","getUsersFromServer","loadPostsFromServer","getPostsFromServer","loadCommentsFromServer","getCommentsFromServer","handleRemoveComment","visibleComments","filter","comment","loadComments","useCallback","useEffect","Provider","value","handleUserSelect","handlePost","postDetails","newCommentSelect","newComment","prevComments","UserSelector","useContext","isOpen","setIsOpen","handleMenu","prev","className","type","onClick","name","role","map","item","href","Loader","PostsList","post","title","classNames","NewCommentForm","postId","submitting","setSubmitting","onAddComment","email","hasNameError","setHasNameError","hasEmailError","setHasEmailError","emailValidationError","setEmailValidationError","hasBodyError","setHasBodyError","setValues","validateEmail","em","test","handleSubmit","event","preventDefault","trim","length","Date","now","current","onSubmit","onReset","htmlFor","placeholder","onChange","target","onFocus","PostDetails","click","setClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcae05b2.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (user: User | null) => {\n  return client.get<Post[]>(`/posts?userId=${user?.id}`);\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postData: Post | null) => {\n  return client.get<Comment[]>(`/comments?postId=${postData?.id}`);\n};\n\nexport const createComment = (comment: Partial<Comment>) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { User } from '../../types/User';\nimport { getUsers } from '../../api/users';\nimport { getPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { deleteComment, getComments } from '../../api/comments';\n\ntype ErrorContextType = {\n  isLoading: boolean,\n  isError: boolean,\n  isLoadingPosts: boolean,\n};\n\ntype UserType = {\n  user: User | null,\n  handleUserSelect: (id: User) => void,\n};\n\ntype ComentsDataType = {\n  comments: Comment[],\n  newCommentSelect: (newComment: Comment) => void,\n  handleRemoveComment: (id: number) => void,\n};\n\ntype PostDataType = {\n  postData: Post | null,\n  handlePost: (postDetails: Post) => void\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const UsersContext = React.createContext<User[] | null>(null);\nexport const ErrorContext\n  = React.createContext<ErrorContextType>({} as ErrorContextType);\nexport const UserContext = React.createContext<UserType>({} as UserType);\nexport const PostsContext\n  = React.createContext<Post[]>([]);\nexport const CommentsContext\n  = React.createContext<ComentsDataType>({} as ComentsDataType);\nexport const PostDataContext\n  = React.createContext<PostDataType>({} as PostDataType);\n\nexport const UserProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [isLoading, setIsloading] = useState(false);\n  const [isLoadingPosts, setIsLoaidingPosts] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [postData, setPostData] = useState<Post | null>(null);\n\n  const handleUserSelect = (id: User) => {\n    setUser(id);\n\n    setPostData(null);\n  };\n\n  const newCommentSelect = (newComment: Comment) => {\n    setComments(prevComments => [...prevComments, newComment]);\n  };\n\n  const handlePost = (postDetails: Post) => {\n    if (postData?.id === postDetails.id) {\n      setPostData(null);\n    } else {\n      setPostData(postDetails);\n    }\n  };\n\n  const loadUsersFromServer = async () => {\n    try {\n      const getUsersFromServer = await getUsers();\n\n      setUsers(getUsersFromServer);\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  const loadPostsFromServer = async () => {\n    try {\n      setIsLoaidingPosts(true);\n      const getPostsFromServer = await getPosts(user);\n\n      setPosts(getPostsFromServer);\n    } catch (error) {\n      setIsError(true);\n      setIsLoaidingPosts(false);\n    } finally {\n      setIsLoaidingPosts(false);\n      setIsError(false);\n    }\n  };\n\n  const loadCommentsFromServer = async () => {\n    try {\n      setIsloading(true);\n      const getCommentsFromServer = await getComments(postData);\n\n      setComments(getCommentsFromServer);\n    } catch (error) {\n      setIsError(true);\n      setIsloading(false);\n    } finally {\n      setIsloading(false);\n      setIsError(false);\n    }\n  };\n\n  const handleRemoveComment = async (id: number) => {\n    try {\n      await deleteComment(id);\n      const visibleComments = comments.filter(comment => {\n        return comment.id !== id;\n      });\n\n      setComments(visibleComments);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  const loadComments = useCallback(() => {\n    loadCommentsFromServer();\n  }, [postData]);\n\n  useEffect(() => {\n    loadUsersFromServer();\n  }, []);\n\n  useEffect(() => {\n    if (user) {\n      loadPostsFromServer();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (postData) {\n      loadComments();\n    }\n  }, [postData]);\n\n  return (\n    <UsersContext.Provider value={users}>\n      <ErrorContext.Provider value={{ isLoading, isError, isLoadingPosts }}>\n        <UserContext.Provider value={{ user, handleUserSelect }}>\n          <PostsContext.Provider value={posts}>\n            <PostDataContext.Provider value={{ postData, handlePost }}>\n              <CommentsContext.Provider value={{\n                comments,\n                newCommentSelect,\n                handleRemoveComment,\n              }}\n              >\n                {children}\n              </CommentsContext.Provider>\n            </PostDataContext.Provider>\n          </PostsContext.Provider>\n        </UserContext.Provider>\n      </ErrorContext.Provider>\n    </UsersContext.Provider>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useContext, useState } from 'react';\nimport { UsersContext, UserContext } from './UserContext/UserContext';\nimport { User } from '../types/User';\n\nexport const UserSelector: React.FC = () => {\n  const users = useContext(UsersContext);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { handleUserSelect, user } = useContext(UserContext);\n\n  const handleMenu = () => {\n    setIsOpen(prev => !prev);\n  };\n\n  const handleUserId = (userId: User) => {\n    handleUserSelect(userId);\n    handleMenu();\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleMenu}\n        >\n          {user ? (\n            <span>{user.name}</span>\n          ) : (\n            <span>Choose a user</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {(users?.map(item => (\n              <a\n                href={`#user-${item.id}`}\n                className=\"dropdown-item\"\n                key={item.id}\n                onClick={() => handleUserId(item)}\n              >\n                {item.name}\n              </a>\n            )))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { PostDataContext, PostsContext } from './UserContext/UserContext';\n\nexport const PostsList: React.FC = () => {\n  const posts = useContext(PostsContext);\n  const { postData, handlePost } = useContext(PostDataContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts?.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': postData?.id !== post.id },\n                  )}\n                  onClick={() => handlePost(post)}\n                >\n                  {postData?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\nimport {\n  CommentsContext,\n  ErrorContext,\n} from './UserContext/UserContext';\nimport { createComment } from '../api/comments';\n\ntype PostId = {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n};\n\ntype NewCommentFormProps = {\n  postId: PostId,\n};\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = ({ postId }) => {\n  const [submitting, setSubmitting] = useState(false);\n  const { newCommentSelect } = useContext(CommentsContext);\n\n  const { isError } = useContext(ErrorContext);\n\n  const onAddComment = async ({ name, email, body }: CommentData) => {\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: postId.id,\n    };\n\n    try {\n      setSubmitting(true);\n      await createComment(newComment);\n    } catch (error) {\n      setSubmitting(false);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const [hasNameError, setHasNameError] = useState(false);\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [emailValidationError, setEmailValidationError] = useState(false);\n  const [hasBodyError, setHasBodyError] = useState(false);\n\n  const [{ name, email, body }, setValues] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const handleChangeName = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setValues(current => ({ ...current, name: event.target.value }));\n  };\n\n  const handleChangeEmail = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setValues(current => ({ ...current, email: event.target.value }));\n  };\n\n  const handleChangeBody = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setValues(current => ({ ...current, body: event.target.value }));\n  };\n\n  const validateEmail = (em: string) => {\n    const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n\n    return emailRegex.test(em);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!validateEmail(email)) {\n      setEmailValidationError(true);\n    }\n\n    if (!email.trim().length) {\n      setHasEmailError(true);\n    }\n\n    if (!name.trim().length) {\n      setHasNameError(true);\n    }\n\n    if (!body.length) {\n      setHasBodyError(true);\n    }\n\n    if (!validateEmail(email) || !email.trim().length\n      || !name.trim().length || !body.length) {\n      return;\n    }\n\n    await onAddComment({ name, email, body });\n\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: postId.id,\n      id: Date.now(),\n    };\n\n    newCommentSelect(newComment);\n\n    setValues(current => ({ ...current, body: '' }));\n  };\n\n  const clearForm = () => {\n    setValues({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setHasNameError(false);\n    setHasEmailError(false);\n    setEmailValidationError(false);\n    setHasBodyError(false);\n  };\n\n  const focusErrorDisabled = () => {\n    setEmailValidationError(false);\n    setHasEmailError(false);\n  };\n\n  return (\n    <>\n      <form\n        data-cy=\"NewCommentForm\"\n        onSubmit={handleSubmit}\n        onReset={clearForm}\n      >\n        <div className=\"field\" data-cy=\"NameField\">\n          <label className=\"label\" htmlFor=\"comment-author-name\">\n            Author Name\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"comment-author-name\"\n              placeholder=\"Name Surname\"\n              className={classNames('input', { 'is-danger': hasNameError })}\n              value={name}\n              onChange={handleChangeName}\n              onFocus={() => setHasNameError(false)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n\n            {hasNameError && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n\n          </div>\n\n          {hasNameError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field\" data-cy=\"EmailField\">\n          <label className=\"label\" htmlFor=\"comment-author-email\">\n            Author Email\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"email\"\n              id=\"comment-author-email\"\n              placeholder=\"email@test.com\"\n              className={classNames('input',\n                { 'is-danger': hasEmailError })}\n              value={email}\n              onChange={handleChangeEmail}\n              onFocus={() => focusErrorDisabled()}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n\n            {(hasEmailError || emailValidationError) && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n\n          </div>\n          {(hasEmailError) && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Email is required\n            </p>\n          )}\n          {emailValidationError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Invalid email address\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field\" data-cy=\"BodyField\">\n          <label className=\"label\" htmlFor=\"comment-body\">\n            Comment Text\n          </label>\n\n          <div className=\"control\">\n            <textarea\n              id=\"comment-body\"\n              name=\"body\"\n              placeholder=\"Type comment here\"\n              className={classNames('textarea',\n                { 'is-danger': hasBodyError })}\n              value={body}\n              onChange={handleChangeBody}\n              onFocus={() => setHasBodyError(false)}\n            />\n          </div>\n\n          {hasBodyError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Enter some text\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className={classNames('button', 'is-link', {\n                'is-loading': submitting,\n              })}\n            >\n              Add\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {/* eslint-disable-next-line react/button-has-type */}\n            <button type=\"reset\" className=\"button is-link is-light\">\n              Clear\n            </button>\n          </div>\n        </div>\n      </form>\n      {isError && (\n        <div className=\"notification is-danger is-light has-text-weight-normal\">\n          Unable to add a comment\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport {\n  CommentsContext,\n  ErrorContext,\n  PostDataContext,\n} from './UserContext/UserContext';\n\nexport const PostDetails: React.FC = () => {\n  const postDetails = useContext(PostDataContext);\n  const { isLoading } = useContext(ErrorContext);\n  const { isError } = useContext(ErrorContext);\n  const { comments, handleRemoveComment } = useContext(CommentsContext);\n  const [click, setClick] = useState(false);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${postDetails.postData?.id}: ${postDetails.postData?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {postDetails.postData?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length && !isLoading && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isLoading && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {!isLoading && (\n            comments.map(comment => (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n                <div className=\"message-header\">\n                  <a href={comment.email} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleRemoveComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))\n          )}\n\n          {!isLoading && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setClick(true)}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n\n        {click && postDetails.postData !== null && !isLoading && (\n          <NewCommentForm postId={postDetails.postData} />)}\n\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { UserSelector } from './components/UserSelector';\nimport {\n  ErrorContext,\n  PostDataContext,\n  PostsContext,\n  UserContext,\n} from './components/UserContext/UserContext';\nimport { Loader } from './components/Loader';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nexport const App: React.FC = () => {\n  const { isError, isLoadingPosts } = useContext(ErrorContext);\n  const { user } = useContext(UserContext);\n  const posts = useContext(PostsContext);\n  const postDetails = useContext(PostDataContext);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!user && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isLoadingPosts ? <Loader /> : (\n                  <>\n                    {(posts?.length > 0 && user && !isError) && (\n                      <PostsList />\n                    )}\n\n                    {(posts?.length === 0 && user && !isError) && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {postDetails.postData !== null && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { UserProvider } from './components/UserContext/UserContext';\n\nReactDOM.render(\n  <UserProvider>\n    <App />\n  </UserProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}